"""This module is used to provide azure tts class."""
from logging import Logger
import requests
import sys
from tenacity import (
    retry,
    stop_after_attempt,
    wait_fixed,
    retry_if_exception_type,
)
from src.common.log_time import log_time
from src.tts.model import (
    TTSResponse,
    TTSExceptionConnectionError,
    TTSExceptionHttpError,
    TTSExceptionUnknownError,
)
from src.tts.az_cogs.config import AzureTTSConfig


class AzureTTS:
    """Implements the TtsInterface for Azure Cognitive Services - TTS REST API calls

    Args:
        TtsInterface (TtsInterface): The Interface that all concrete implementation classes
        should implement to perform Text to speech operations
    """

    def __init__(self, config: AzureTTSConfig, logger: Logger) -> None:
        """
        Initializes the AzureTTS class

        @param
            config (AzureTTSConfig): The configuration object that contains the
            logger (Logger): The logger object to be used for logging
        """
        self.l_config = config
        self.l_logger = logger

    @log_time
    @retry(
        wait=wait_fixed(1.0),
        stop=stop_after_attempt(3),
        retry=retry_if_exception_type(TTSExceptionConnectionError),
        reraise=True,
    )
    def _process(self, ssml_payload: str) -> TTSResponse:
        """Internal method that returns the Audio stream generated by TTS Service based on text input.
        It does not raise any Exceptions, instead error messages are returned in the response
        There is no consideration for retries with back off in the call to TTS, since it would
        be more optimal to discard the this frame and take the next frame instead

        Args:
            ssml_payload (str): the SSML payload as string for which the audio content is to
            be generated

        Returns:
            AudioOutResponse: The Response object that wraps
            a) audio content as byte stream, or returns None if there is an error
        """

        # Encode the string before sending to the TTS Service
        encoded_data = ssml_payload.encode(self.l_config.l_text_encoding)

        headers = {
            "Ocp-Apim-Subscription-Key": self.l_config.l_subscription_key,
            "Content-Type": "application/ssml+xml",
            "X-Microsoft-OutputFormat": self.l_config.l_audio_output_format,
        }
        try:
            response = requests.post(
                self.l_config.l_cogs_tts_endpoint,
                headers=headers,
                data=encoded_data,
                timeout=self.l_config.l_timeout,
            )
        except requests.exceptions.ConnectionError as cex:
            # When internet connectivity is lost, for e.g.
            self.l_logger.exception(cex)
            self.l_logger.error(
                f"Connection error when making the TTS Call to endpoint {self.l_config.l_cogs_tts_endpoint}, Exception: {cex}"
            )
            raise TTSExceptionConnectionError(
                f"Connection error when making the TTS Call : {cex}"
            ) from cex
        except Exception as ex:
            self.l_logger.exception(ex)
            self.l_logger.error(
                f"Unknown error when making the TTS Call to endpoint {self.l_config.l_cogs_tts_endpoint}', Exception: {ex}"
            )
            raise TTSExceptionUnknownError(
                f"Unknown error when making the TTS Call : {ex}"
            ) from ex
        # if response.ok:
        if response.status_code == 200:
            self.l_logger.debug(
                "TTS audio size: " + str(sys.getsizeof(response.content)) + " bytes"
            )
            return TTSResponse(response.content)
        else:
            self.l_logger.error(
                f"HTTP Error occurred when making the TTS call: {str(response.status_code)}"
            )
            raise TTSExceptionHttpError(
                f"HTTP Error occurred {str(response.status_code)}"
            )

    def call_tts(self, ssml_payload: str) -> TTSResponse:
        """Returns the Audio stream generated by TTS Service based on text input.
        It does not raise any Exceptions, instead error messages are returned in the response
        There is no consideration for retries with back off in the call to TTS, since it would
        be more optimal to discard the this frame and take the next frame instead

        Args:
            ssml_payload (str): the SSML payload as string for which the audio content is to
            be generated. The caller of this method needs to pass a valid SSML string; no
            validation done in this function

        Returns:
            TTSResponse: The Response object that wraps
            a) audio content as byte stream, or returns None if there is an error
        """
        return self._process(ssml_payload)
